modprog <- lm(formula, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
formula=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(gkl, 9)+lag(kursas,2)
lentele=data.frame()
for(i in c(30,70,100,150)){
lentele=rbind(lentele,validation(i,formula))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele)
View(lentele)
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(gkl, 9)+lag(kursas,2)                        #prognozuojantis
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(gkl, 9)+lag(kursas,2)    #reiksmingumui
lentele=data.frame()
for(i in c(30,70,100,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele)
View(lentele)
modelis = lm(OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2) )#manvydo
AIC(modelis)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
AIC(modelis)
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #reiksmingumui
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
formula_prog2=OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2)
formula_kain2=OMX ~ SP350 + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2)
lentele3=data.frame()
for(i in c(30,70,100,140)){
lentele3=rbind(lentele3,validation(i,formula_prog2))
}
lentele3[,c(1:5)]=lentele3[,c(5,2,3,1,4)]
colnames(lentele3)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele3)
lentele4=data.frame()
for(i in c(30,70,100,140)){
lentele4=rbind(lentele4,validation2(i,formula_prog2,formula_kain2))
}
lentele4[,c(1:5)]=lentele4[,c(5,2,3,1,4)]
colnames(lentele4)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele4)
formula_prog3=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2)
formula_kain3=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2)
lentele5=data.frame()
for(i in c(30,70,100,140)){
lentele5=rbind(lentele5,validation(i,formula_prog3))
}
lentele5[,c(1:5)]=lentele5[,c(5,2,3,1,4)]
colnames(lentele5)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele5)
lentele6=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele6=rbind(lentele6,validation2(i,formula_prog3,formula_kain3))
}
lentele6[,c(1:5)]=lentele6[,c(5,2,3,1,4)]
colnames(lentele6)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele6)
kable(lentele4)
kable(lentele6)
kable(lentele3)
kable(lentele5)
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+  lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[11:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:159)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 5)+
geom_hline(yintercept = -5)
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[11:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:159)
a
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
a
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[14:length(data3$OMX)])
a=data.frame(a)
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[14:length(data3$OMX)])
a=data.frame(a)
a
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
a
menesiai=c(1:159)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 5)+
geom_hline(yintercept = -5)
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:157)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 5)+
geom_hline(yintercept = -5)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 5)+
geom_hline(yintercept = -5)
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:157)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(gkl, 9)+lag(kursas,2)                        #prognozuojantis
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(gkl, 9)+lag(kursas,2)    #reiksmingumui
lentele=data.frame()
for(i in c(30,70,100,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","sandoriu skaicius")
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2)
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2)
#kodas parasytas tikrinimui su atsitiktiniu pirkimu, sioje dalyje panaikinsime atsitiktinius pirkimus ir parodysime tik strategiju pirkimus ir pelnus
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>=0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele=lentele[,-c(3,4)]
kable(lentele)
lentele2=data.frame()
for(i in c(30,70,100,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele2=lentele2[,-c(3,4)]
kable(lentele2)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
kable(lentele)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele=lentele[,-c(3,4)]
kable(lentele)
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele2=lentele2[,-c(3,4)]
kable(lentele2)
kable(lentele)
kable(lentele2)
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:157)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Prognozuojama ir reali akcijų grąža")+ geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:157)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
kable(lentele2)
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
kable(lentele2)
View(lentele2)
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:157)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2) , data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
kable(coeftest(modelis, vcov=vcovHC)[,])
summary(modelis)
summary(modelis)[8]
summary(modelis)
kable(coeftest(modelis, vcov=vcovHC)[,])
summary(modelis)
kable(coeftest(modelis, vcov=vcovHC)[,])

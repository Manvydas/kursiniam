dbinom(50,100,0.5)
dbinom(500,1000,0.5)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:6,2,replace=TRUE)
if(sum(trial) == 7) {
success <- if(trial[1] > 4) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:6,2,replace=TRUE)
if(sum(trial) == 7) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE){
success <- if(duplicated(trial)) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
trial
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE){
success <- if(duplicated(trial)) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE){
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE){
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n) {
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
# 3 uzduotis
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n) {
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:6,2,replace=TRUE)
if(sum(trial) == 7) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n)
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
trial
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial)) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
warnings()
duplicated(trial)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial) == TRUE) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial, incomparables = FALSE, MARGIN = 1,
fromLast = FALSE, == TRUE) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
duplicated(trial)
trial
x <- rpois(100000,2)
mean(x%%2==0)
?rbinom
rpois
?rpois
X <- rbinom(20,size,p)
p <- 0.9
size <- 1000
X <- rbinom(20,size,p)
X
size <- 10000
X <- rbinom(20,size,p)
X
for(h in 80:100)
p <- 0.9
k <- 70
sum <- 0
for(h in 80:100)
{
sum <- sum +abs(1-pbinom(k,h,p)-(1-ppois(k,h*p)))
}
sum
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
#tiksli:
1-(ppois(1,1/6000)&ppois(3,1/6000,lower.tail = FALSE)
1-(ppois(1,1/6000)&ppois(3,1/6000,lower.tail = FALSE))
1-(ppois(1,1/6000)&&ppois(3,1/6000,lower.tail = FALSE))
1-(ppois(1,1/6000) && ppois(3,1/6000,lower.tail = FALSE))
simlist <- replicate(10000, sum(rpois(60,16)))
mean(simlist>999)
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
?replicate
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
p <- 1/6000
n <- 10000
trials <- 100000
metimai <- rbinom(trials,n,p)
mean(metimai > 0 & metimai < 4)
p <- 1/6000
n <- 10000
trials <- 100000
metimai <- rbinom(trials,n,p)
mean(metimai > 0 & metimai < 4)
#apytiksle:
lambda <- p*n
metimai <- rpois(trials,lambda)
mean(metimai > 0 & metimai < 4)
dbinom(10,100,0.072)
dbinom(90,100,0.072)
dbinom(90,100,0.072)
dbinom(90,100,0.072)
dbinom(90,10,0.072)
dbinom(90,10,0.072)
dnbinom(90,10,0.072)
?round
a <- dnbinom(90,10,0.072)
round(a, digits = 5)
p(A) <- 0.2
p(AA) <- p(A)*p(A)
p(A) <- 0.2
pA <- 0.2
pAA <- pA*pA
pAa <- 2*0.2*(1-0.2)
paa <- (1-0.2)^2
dmultinom(c(1,2,5),prob=c(pAA,pAa,paa))
p1 <- dmultinom(c(1,0,7),prob=c(pAA,pAa,paa))
p2 <- dmultinom(c(0,1,7),prob=c(pAA,pAa,paa))
p3 <- dmultinom(c(0,0,8),prob=c(pAA,pAa,paa))
p <- p1+p2+p3
round(dmultinom(c(1,2,5),prob=c(pAA,pAa,paa)),digits=5)
round(dmultinom(c(1,2,5),prob=c(pAA,pAa,paa)),digits=3)
p1 <- dmultinom(c(1,0,7),prob=c(pAA,pAa,paa))
p2 <- dmultinom(c(0,1,7),prob=c(pAA,pAa,paa))
p3 <- dmultinom(c(0,0,8),prob=c(pAA,pAa,paa))
p <- p1+p2+p3
p <- round(p1+p2+p3, digits=3)
ggeom(0.95,0.25)+1
min(which(cumsum(dgeom(0:100,0.25))>=0.95))
?ggeom
qgeom(0.95,0.25)+1 # +1 nes R paketas skaiciuoja nesekmiu skaiciu
min(which(cumsum(dgeom(0:100,0.25))>=0.95))
# 3 variantas
aplikacija <- 1
tikimybe <- 0
while(tikimybe<=0.95)
{tikimybe = pgeom(aplikacija-1,0.25)
aplikacija=aplikacija+1
}
aplikacija-1
?dbinom
plot(dbinom(n,0:n,p))
plot(dbinom(n,p))
plot(dbinom(n,prob=p))
plot(dbinom(0:n,n,p))
plot(dbinom(0:n,n,p)type="l")
plot(dbinom(0:n,n,p),type="l")
plot(dbinom(0:n,n,rep(0.3,60)),type="l")
plot(dbinom(0:60,60,rep(0.3,60)),type="l")
plot(dbinom(0:60,60,0.3),type="l")
dbinom(0:60,60,0.3)
dbinom(0:60,6,0.3)
dbinom(0:60,10000,0.3)
dbinom(0:60,600,0.3)
dbinom(0:60,60,0.3)
1:60
plot(dbinom(1:60,600,0.3),type="l")
dbinom(1:60,600,0.3)
plot(dbinom(1:60,60,0.3),type="l")
plot(dpois(1:60,60*0.3))
plot(dpois(1:60,60*0.3),type="l")
plot(dbinom(1:60,60,0.3),type="l")
#b) P(Y=k), kai k=1,...,60.
plot(dpois(1:60,60*0.3),type="l")
plot(dbinom(1:60,60,0.3)/dpois(1:60,60*0.3),type="l")
dbinom(1:60,59,0.3)
\usepackage[utf8]{inputnc}
usepackage[utf8]{inputnc}
install.packages("utf8")
render("input.Rmd", "pdf_document")
install.packages("pandoc")
require(knitr)
require(markdown)
locale
?Set.locale
?Get.locale
?Get.locale()
?Set.locale()
Get.locale()
get.locale()
getlocale()
pairs(data3[,c("OMX","infliacija","nedarbas","vp","mhope","phope","vhope","pramhope","kursas")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("dynlm")
library(ggplot2)
library(reshape2)
library("knitr")
library("tseries")
library("MASS")
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
setwd("~/Documents/kursiniam/kodas ir ataskaitos/juodrastis")
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=data2$euribor/12
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3,2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
kable(p)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor2 <- function(x, y, digits=2, cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
test <- cor.test(x,y)
Signif <- ifelse(round(test$p.value,3)<0.001,"p<0.001",paste("p=",round(test$p.value,3)))
text(0.5, 0.25, paste("r=",txt))
text(.5, .75, Signif)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor,...)    #ši funkcija reikalinga grafikų lentelei
#išbrėžti (koreliacijos koeficiento radimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
pairs(data3[,c("OMX","SP350","SP500")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
correlations <- cor(data3[,c(2:21)], use="pairwise", method="spearman")
mydf <- cbind(rownames(correlations), correlations)
mydf = mydf[,c(1,2)]
rownames(mydf) <- NULL
colnames(mydf) <- c("Kintamieji","OMX")
kable(mydf)
correlations <- cor(data3[,c(2:21)], use="pairwise", method="spearman")
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji"))
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor2 <- function(x, y, digits=2, cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
test <- cor.test(x,y)
Signif <- ifelse(round(test$p.value,3)<0.001,"p<0.001",paste("p=",round(test$p.value,3)))
text(0.5, 0.25, paste("r=",txt))
text(.5, .75, Signif)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor,...)    #ši funkcija reikalinga grafikų lentelei
#išbrėžti (koreliacijos koeficiento radimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]*100
data2$euribor=data2$euribor/12
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji"))
pairs(data3[,c("OMX","SP350","SP500")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
correlations <- cor(data3[,c(2:21)], use="pairwise", method="spearman")
mydf <- cbind(rownames(correlations), correlations)
mydf = mydf[,c(1,2)]
rownames(mydf) <- NULL
colnames(mydf) <- c("Kintamieji","OMX")
kable(mydf)
kable(round(mydf)
)
kable(round(mydf))
round(mydf$OMX)
pairs(data3[,c("OMX","infliacija","nedarbas","vp","mhope","phope","vhope","pramhope","kursas")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
pairs(data3[,c("OMX","infliacija","nedarbas","kursas")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
pairs(data3[,c("OMX","mhope","phope","vhope","pramhope","vp")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp + euribor + gkl + ip + kursas, data=data3)
stepAIC(mod)
stepAIC(mod)$Call
stepAIC(mod)
step_AIC <- stepAIC(mod)
a <- stepAIC(mod)
?stepAIC
a <- stepAIC(mod, direction = c("both"))
a <- stepAIC(mod)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=data2$euribor/12
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3,2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,2] = round(p[,2])
kable(p)
p
class(p)
class(p[,2])
class(p[,1])
p[,1] = round(p[,1])
kable(p)
?round
p[,1] = round(p[,1], digits = 2)
kable(p)
p=apply(data3,2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
mod_po_aic <- lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope + ul, data = data3)
summary(mod_po_aic)
kable(summary(mod_po_aic$coef))
summary(mod_po_aic)
kable(data.frame(summary(mod_po_aic)[4]))
Sys.setlocale(locale="en_US.UTF-8")
plot(data[,OMX], type="l",main="ąčęėįšųū90-ž")
Sys.setlocale(locale="en_LT.UTF-8")
Sys.setlocale(locale="en_LTH.UTF-8")
Sys.getlocale()
Sys.setlocale(locale="Lithuaninan_LT.UTF-8")
Sys.setlocale(locale="Lithuaninan_LT.UTF-8")
datafr=data.frame(summary(mod_po_aic)[4])
colnames(datafr)=c("beta koeficientai","standartinis nuokrypis","koeficientų t reikšmės","p reikšmė")
kable(datafr)
View(datafr)
View(datafr)
View(mydf)
View(datafr)
datafr=data.frame(summary(mod_po_aic)[4])
colnames(datafr)=c("beta koeficientai","standartinis nuokrypis","koeficientų t reikšmės","p reikšmė")
rownames(datafr)=c("beta nulinis","S&P350","nedarbas","infliacija","paslaugų pasitikėjimas", "pramonės pasitikėjimas", "užsakymų lūkesčiai")
kable(datafr)
summary(mod_po_aic)
View(datafr)
stepAIC(mod)
View(datafr)
stepAIC(mod)
datafr=data.frame(summary(mod_po_aic)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("beta koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
rownames(datafr)=c("beta nulinis","S&P350","nedarbas","infliacija","paslaugu pasitikejimas", "pramones pasitikejimas", "uzsakymu lukesciai")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
install.packages("sandwich")

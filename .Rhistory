setwd("~/Documents/kursiniam")
setwd("~/Documents/kursiniam")
duom1 <- read.csv2("omx.csv")
View(duom1)
duom1 <- read.csv2("omx.xls")
duom1 <- read.csv("omx.xls")
setwd("~/Documents/kursiniam")
duom1 <- read.csv2("omx.csv")
setwd("~/Documents/kursiniam")
duom1 <- read.csv2("omx.csv")
View(duom1)
duom2 <- read.csv2("pirmas.csv")
duom2 <- read.csv2("pirmas.csv")
duom2 <- read.csv2("antras.csv")
View(duom2)
setwd("~/Documents/kursiniam")
duom2 <- read.csv2("antras.csv")
mod1 <- lm(B~A+C+D+E+G,data=duom2)
library("car")
install.packages("car")
library("car")
outlierTest(mod1)
summary(mod1)
qqPlot(mod1, id.n=2)
View(duom2)
duom3 <- duom2[-c(1,120),]
duom4 <- duom3[-c(199,200),]
library("usdm")
install.packages("usdm")
mod1 <- lm(B~A+C+D+E+G,data=duom4)
mod1 <- lm(B~A+C+D+E+G,data=duom4)
library("car")
outlierTest(mod1)
qqPlot(mod1, id.n=2)
plot(mod1)
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library(MASS)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele=lentele[,-c(3,4)]
kable(lentele)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
kable(lentele)
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,0)
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
kable(lentele)
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1)
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,0)
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>=0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
kable(lentele2)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
Find_Max_CCF<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[1:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){
res_max = res[which.min(res$cor),]
}
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
data4=data3[,c("Data","OMX","SP350","kk","dll","nedarbas","mhope","phope","pramhope","shope","ul","vhope","vp","mp" ,"gkl","ip","kursas")]
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
Find_Max_CCF2<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[0:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){
res_max = res[which.min(res$cor),]
}
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
mod_prog=stepAIC(mod, direction="both")
mod_prog
,lagdata[15,2]
lagdata[15,2]
lagdata[14,2]
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,4)+lag(kursas,1),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
modelis=mod_prog
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
AIC(modelis)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
AIC(modelis)
mod_prog
fomula_prog=mod_prog
fomula_prog=mod_prog
formula_prog=mod_prog
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
View(data4)
View(data4)
View(data4)
View(data4)
Find_Max_CCF<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[1:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){
res_max = res[which.min(res$cor),]
}
else if(i == 17){
res_max = res[1,]
}
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
mod_prog=stepAIC(mod, direction="both")
mod_prog
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
lagdata
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
lagdata
lagdata
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
mod_prog=stepAIC(mod, direction="both")
mod_prog
kable(lentele)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
formula_prog=mod_prog
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
modelis=mod_prog
AIC(modelis)
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,1),data=data3)
AIC(modelis)
kable(lentele)
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
mod_prog
formula_prog=mod_prog
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)
Find_Max_CCF<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[1:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){
res_max = res[which.min(res$cor),]
}
# else if(i == 17){
# res_max = res[1,]
# }
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
data4=data3[,c("Data","OMX","SP350","kk","dll","nedarbas","mhope","phope","pramhope","shope","ul","vhope","vp","mp" ,"gkl","ip","kursas")]
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
lagdata=data.frame()
for (i in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,i],i)
if(i==3){lagdata=ccfvalues}
else{
lagdata=rbind(lagdata,ccfvalues)
}
}
lagdata
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
mod_prog=stepAIC(mod, direction="both")
mod_prog
lagdata[15,2]
formula_prog=mod_prog
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
kable(lentele)

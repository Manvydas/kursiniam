install.packages("png")
?rasterImage
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20], caption="Vienetinės šaknies hipotezių tikrinimas")
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai",formattable(digits=3,format="f"))
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
formattable(a, digits=3,format="f")
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
formattable(a, digits=3,format="f")
install.packages("formattable")
library("formattable")
formattable(a, digits=3,format="f")
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
formattable(a, digits=3,format="f")
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20], caption="Vienetinės šaknies hipotezių tikrinimas")
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
# Chunk 5
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
r2<-kable(summary(modelis)[9])
# Chunk 6
B <- matrix(c(0.0001, 0.0001, 0.536, 0.563,
0.062, 0.036, 0.188, 0.316,
0.222, 0.048, 0.106, 0.176,
0.060, 0.022, 0.241, 0.266,
0.064, 0.079, 0.044, 0.049,
0.063, 0.035, 0.103, 0.114,
0.001, 0.009, -1.569, -1.421,
0.006, 0.032, 0.346, 0.278), nrow=8, ncol=4, byrow = T)
rownames(B) <- c("SP350", "Mažmeninės prekybos pasitikėjimas", "Paslaugų pasitikėjimas", "Pramonės pasitikėjimas", "Užsakymų lūkesčiai", "Mažmeninė prekyba", "Gamintojų kainų lygis", "EUR/DOL")
colnames(B) <- c("p-value pradiniame modelyje", "p-value po korekcijos", "koeficientas pradiniame modelyje", "koeficientas po korekcijos")
pander::pander(B, split.cell = 80, split.table = Inf, caption="Dviguba atranka")
# Chunk 7
#kaip gaunamamas prognozuojantis modelis algoritmas
data4=data3[,c("Data","OMX","SP350","kk","dll","nedarbas","mhope","phope","pramhope","shope","ul","vhope","vp","mp" ,"gkl","ip","kursas")]
Find_Max_CCF<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[1:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){                       # mažas apribojimas: gamintojų kainų lygis ir nedarbas gali turėti tik neigiamą koreliaciją, o visi kiti tik teigiamą koreliaciją (pagal logiką)
res_max = res[which.min(res$cor),]
}
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
lagdata=data.frame()
for (u in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,u],u)
if(u==3){lagdata=ccfvalues}
else{lagdata=rbind(lagdata,ccfvalues)}
}
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
modprog=stepAIC(mod, direction="both")
formula(modprog)
# Chunk 8
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:158)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value*100, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2) + geom_hline(yintercept =-2)
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20], caption="Vienetinės šaknies hipotezių tikrinimas")
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
# Chunk 5
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
r2<-kable(summary(modelis)[9])
# Chunk 6
B <- matrix(c(0.0001, 0.0001, 0.536, 0.563,
0.062, 0.036, 0.188, 0.316,
0.222, 0.048, 0.106, 0.176,
0.060, 0.022, 0.241, 0.266,
0.064, 0.079, 0.044, 0.049,
0.063, 0.035, 0.103, 0.114,
0.001, 0.009, -1.569, -1.421,
0.006, 0.032, 0.346, 0.278), nrow=8, ncol=4, byrow = T)
rownames(B) <- c("SP350", "Mažmeninės prekybos pasitikėjimas", "Paslaugų pasitikėjimas", "Pramonės pasitikėjimas", "Užsakymų lūkesčiai", "Mažmeninė prekyba", "Gamintojų kainų lygis", "EUR/DOL")
colnames(B) <- c("p-value pradiniame modelyje", "p-value po korekcijos", "koeficientas pradiniame modelyje", "koeficientas po korekcijos")
pander::pander(B, split.cell = 80, split.table = Inf, caption="Dviguba atranka")
# Chunk 7
#kaip gaunamamas prognozuojantis modelis algoritmas
data4=data3[,c("Data","OMX","SP350","kk","dll","nedarbas","mhope","phope","pramhope","shope","ul","vhope","vp","mp" ,"gkl","ip","kursas")]
Find_Max_CCF<- function(a,b,i){
d <- ccf(a, b, plot = FALSE,na.action = na.pass)
d = d[1:19]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
if(i %in% c(6,15)){                       # mažas apribojimas: gamintojų kainų lygis ir nedarbas gali turėti tik neigiamą koreliaciją, o visi kiti tik teigiamą koreliaciją (pagal logiką)
res_max = res[which.min(res$cor),]
}
else{ res_max = res[which.max(res$cor),]}
return(res_max)
}
lagdata=data.frame()
for (u in 3:length(data4[1,])){
ccfvalues <- Find_Max_CCF(data4$OMX,data4[,u],u)
if(u==3){lagdata=ccfvalues}
else{lagdata=rbind(lagdata,ccfvalues)}
}
mod=lm(OMX~lag(SP350,lagdata[1,2])+lag(kk,lagdata[2,2])+lag(dll,lagdata[3,2])+lag(nedarbas,lagdata[4,2])+lag(mhope,lagdata[5,2])+lag(phope,lagdata[6,2])+lag(pramhope,lagdata[7,2])+lag(shope,lagdata[8,2])+lag(ul,lagdata[9,2])+lag(vhope,lagdata[10,2])+lag(vp,lagdata[11,2])+lag(mp,lagdata[12,2])+lag(gkl,lagdata[13,2])+lag(ip,lagdata[14,2])+lag(kursas,lagdata[15,2]),data=data4)
modprog=stepAIC(mod, direction="both")
formula(modprog)
# Chunk 8
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,1),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:158)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value*100, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2) + geom_hline(yintercept =-2)
formula_prog=OMX ~ lag(SP350, 1) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip,4) + lag(kursas, 2)     # kai lagas turi buti
#kodas parasytas tikrinimui su atsitiktiniu pirkimu, sioje dalyje panaikinsime atsitiktinius pirkimus ir parodysime tik strategiju pirkimus ir pelnus
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
parduoti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>0.02){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]<0.02){parduoti=append(parduoti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
grazapard=sum(data3[parduoti,"OMX"])*(-1)
random=replicate(10000,gen(pradzia,pirkti))
random2=replicate(10000,gen(pradzia,parduoti))*(-1)
p=mean(random<graza)
p2=mean(random2<grazapard)
vidurkis_random = mean(random)
vidurkis_random2 = mean(random2)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza*100)
p=append(p,vidurkis_random*100)
p=append(p,graza*100/length(pirkti))
p=append(p,pradzia)
p[c(1:5)]=p[c(5,2,3,1,4)]
p=append(p,length(pirkti))
p=append(p,grazapard*100)
p=append(p,vidurkis_random2*100)
p=append(p,p2)
p=append(p,grazapard*100/length(parduoti))
p=append(p,length(parduoti))
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
colnames(lentele) = c("pradinės imties dydis","pirkimo strategijos grąža %","vidutinė atsitiktinio pirkimo grąža %","tikimybė, kad geriau uz atsiktiktinį pirkimą","vidutinė grąža per pirkimą","pirkimų skaičius","pardavimo strategijos grąžą %","vidutinė atsitiktinio pardavimo grąža %","tikimybė, kad geriau uz atsiktiktinį pardavimą","vidutinė grąža per pardavimą","pardavimų skaičius")
```
B <- matrix(c(0.0001, 0.0001, 0.536, 0.563,
0.062, 0.036, 0.188, 0.316,
0.222, 0.048, 0.106, 0.176,
0.060, 0.022, 0.241, 0.266,
0.064, 0.079, 0.044, 0.049,
0.063, 0.035, 0.103, 0.114,
0.001, 0.009, -1.569, -1.421,
0.006, 0.032, 0.346, 0.278), nrow=8, ncol=4, byrow = T)
rownames(B) <- c("SP350", "Mažmeninės prekybos pasitikėjimas", "Paslaugų pasitikėjimas", "Pramonės pasitikėjimas", "Užsakymų lūkesčiai", "Mažmeninė prekyba", "Gamintojų kainų lygis", "EUR/DOL")
colnames(B) <- c("p-value pradiniame modelyje", "p-value po korekcijos", "koeficientas pradiniame modelyje", "koeficientas po korekcijos")
pander::pander(B, split.cell = 80, split.table = Inf, label="lent:5")
View(B)
as.data.frame(B)
a<-as.data.frame(B)
View(a)
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20], caption="Vienetinės šaknies hipotezių tikrinimas")
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
r2<-kable(summary(modelis)[9])
```
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
a<-pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf, caption="Regresijos rezultatai")
r2<-kable(summary(modelis)[9])
summary(modelis
)

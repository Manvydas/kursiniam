trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
# 3 uzduotis
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n) {
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:6,2,replace=TRUE)
if(sum(trial) == 7) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }}
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n)
trial <- sample(1:365,200,replace=TRUE) {
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(trial[1] > 2) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
trial
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial)) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
warnings()
duplicated(trial)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial) == TRUE) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
n <- 10000
ctr <- 0
simlist <- numeric(n)
while(ctr<n){
trial <- sample(1:365,200,replace=TRUE)
success <- if(duplicated(trial, incomparables = FALSE, MARGIN = 1,
fromLast = FALSE, == TRUE) 1 else 0
ctr <- ctr +1
simlist[ctr] <- success }
mean(simlist)
duplicated(trial)
trial
x <- rpois(100000,2)
mean(x%%2==0)
?rbinom
rpois
?rpois
X <- rbinom(20,size,p)
p <- 0.9
size <- 1000
X <- rbinom(20,size,p)
X
size <- 10000
X <- rbinom(20,size,p)
X
for(h in 80:100)
p <- 0.9
k <- 70
sum <- 0
for(h in 80:100)
{
sum <- sum +abs(1-pbinom(k,h,p)-(1-ppois(k,h*p)))
}
sum
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
#tiksli:
1-(ppois(1,1/6000)&ppois(3,1/6000,lower.tail = FALSE)
1-(ppois(1,1/6000)&ppois(3,1/6000,lower.tail = FALSE))
1-(ppois(1,1/6000)&&ppois(3,1/6000,lower.tail = FALSE))
1-(ppois(1,1/6000) && ppois(3,1/6000,lower.tail = FALSE))
simlist <- replicate(10000, sum(rpois(60,16)))
mean(simlist>999)
simlist <- rpois(10000,16*60)
sum((simlist>=1000))/10000
?replicate
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
simlist <- rpois(10000,1/6000)
sum((simlist=2))/10000
p <- 1/6000
n <- 10000
trials <- 100000
metimai <- rbinom(trials,n,p)
mean(metimai > 0 & metimai < 4)
p <- 1/6000
n <- 10000
trials <- 100000
metimai <- rbinom(trials,n,p)
mean(metimai > 0 & metimai < 4)
#apytiksle:
lambda <- p*n
metimai <- rpois(trials,lambda)
mean(metimai > 0 & metimai < 4)
dbinom(10,100,0.072)
dbinom(90,100,0.072)
dbinom(90,100,0.072)
dbinom(90,100,0.072)
dbinom(90,10,0.072)
dbinom(90,10,0.072)
dnbinom(90,10,0.072)
?round
a <- dnbinom(90,10,0.072)
round(a, digits = 5)
p(A) <- 0.2
p(AA) <- p(A)*p(A)
p(A) <- 0.2
pA <- 0.2
pAA <- pA*pA
pAa <- 2*0.2*(1-0.2)
paa <- (1-0.2)^2
dmultinom(c(1,2,5),prob=c(pAA,pAa,paa))
p1 <- dmultinom(c(1,0,7),prob=c(pAA,pAa,paa))
p2 <- dmultinom(c(0,1,7),prob=c(pAA,pAa,paa))
p3 <- dmultinom(c(0,0,8),prob=c(pAA,pAa,paa))
p <- p1+p2+p3
round(dmultinom(c(1,2,5),prob=c(pAA,pAa,paa)),digits=5)
round(dmultinom(c(1,2,5),prob=c(pAA,pAa,paa)),digits=3)
p1 <- dmultinom(c(1,0,7),prob=c(pAA,pAa,paa))
p2 <- dmultinom(c(0,1,7),prob=c(pAA,pAa,paa))
p3 <- dmultinom(c(0,0,8),prob=c(pAA,pAa,paa))
p <- p1+p2+p3
p <- round(p1+p2+p3, digits=3)
ggeom(0.95,0.25)+1
min(which(cumsum(dgeom(0:100,0.25))>=0.95))
?ggeom
qgeom(0.95,0.25)+1 # +1 nes R paketas skaiciuoja nesekmiu skaiciu
min(which(cumsum(dgeom(0:100,0.25))>=0.95))
# 3 variantas
aplikacija <- 1
tikimybe <- 0
while(tikimybe<=0.95)
{tikimybe = pgeom(aplikacija-1,0.25)
aplikacija=aplikacija+1
}
aplikacija-1
?dbinom
plot(dbinom(n,0:n,p))
plot(dbinom(n,p))
plot(dbinom(n,prob=p))
plot(dbinom(0:n,n,p))
plot(dbinom(0:n,n,p)type="l")
plot(dbinom(0:n,n,p),type="l")
plot(dbinom(0:n,n,rep(0.3,60)),type="l")
plot(dbinom(0:60,60,rep(0.3,60)),type="l")
plot(dbinom(0:60,60,0.3),type="l")
dbinom(0:60,60,0.3)
dbinom(0:60,6,0.3)
dbinom(0:60,10000,0.3)
dbinom(0:60,600,0.3)
dbinom(0:60,60,0.3)
1:60
plot(dbinom(1:60,600,0.3),type="l")
dbinom(1:60,600,0.3)
plot(dbinom(1:60,60,0.3),type="l")
plot(dpois(1:60,60*0.3))
plot(dpois(1:60,60*0.3),type="l")
plot(dbinom(1:60,60,0.3),type="l")
#b) P(Y=k), kai k=1,...,60.
plot(dpois(1:60,60*0.3),type="l")
plot(dbinom(1:60,60,0.3)/dpois(1:60,60*0.3),type="l")
dbinom(1:60,59,0.3)
\usepackage[utf8]{inputnc}
usepackage[utf8]{inputnc}
install.packages("utf8")
render("input.Rmd", "pdf_document")
install.packages("pandoc")
require(knitr)
require(markdown)
locale
?Set.locale
?Get.locale
?Get.locale()
?Set.locale()
Get.locale()
get.locale()
getlocale()
x <- c(21,24,26,27,29,25,25,30)
y <- c(2.8,3.4,3.0,3.5,3.6,3.0,2.7,3.7)
avgx <- mean(x)
avgy <- mean(y)
sum((x-avgx)*(y-avgy))/sum((x-avgx)^2)
b1 <- sum((x-avgx)*(y-avgy))/sum((x-avgx)^2)
b0 <- avgy-b1*avgx
kable(summary(modelis)[9])
p=apply(data3[,-"palukanos"],2,function(i)adf.test(i,k=1)$p.value)
setwd("~/Documents/kursiniam/kodas ir ataskaitos/juodrastis")
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$palukanos=data2$palukanos[-1]
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
pander::pander(p, split.cell = 80, split.table = Inf)
kable(p[,1:10])
kable(p[,11:20])
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
pander::pander(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],\multicolumn{4}{|c|}{summary(modelis)[9]}), split.cell = 80, split.table = Inf)
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
pander::pander( c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
\multicolumn{4}{|c|}{summary(modelis)[9]} ), split.cell = 80, split.table = Inf)
install.packages("texreg")
library("texreg")
modelis=lm(OMX ~ SP350  + lag(mhope, 3) + lag(phope,12) + lag(pramhope,0) + lag(ul,10) + lag(mp,1) + lag(gkl, 9) + lag(kursas,2),data=data3)
texreg(c(pander::pander(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,], split.cell = 80, split.table = Inf),
kable(summary(modelis)[9])))
install.packages("stargazer")
library("stargazer")
stargazer(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],,
kable(summary(modelis)[9])))
stargazer(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3")),
kable(summary(modelis)[9])))
stargazer(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
kable(summary(modelis)[8:9])))
stargazer(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
summary(modelis)[9]))
texreg(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
summary(modelis)[9]))
texreg(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
kable(summary(modelis)[9])))
a<-stargazer(c(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
summary(modelis)[9]))
a<-stargazer(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
summary(modelis)[9])
stargazer(modelis, vcov=vcovHC(modelis,type="HC3"))
b<-merge(coeftest(modelis, vcov=vcovHC(modelis,type="HC3"))[,],
kable(summary(modelis)[9]))
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$palukanos=data2$palukanos[-1]
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20])
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20])
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
```
```{r, message=FALSE, echo=FALSE}
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
modelis = lm(OMX ~ lag(SP350,0) + lag(kk,1) + lag(kk,8) + lag(dll,1) + nedarbas + lag(mhope,3) + lag(phope, 12) + lag(phope,0) + lag(pramhope,0)+ lag(shope,1) + lag(ul,10) + lag(vhope,4) + lag(vp,0) + lag(mp,1) + lag(gkl,9) + lag(ip,4) + lag(ip,1) + lag(kursas,2) , data=data3)
boo<-stepAIC((modelis))
data3$palukanos=data2$palukanos[-1]
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$palukanos=data2$palukanos[-1]
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20])
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
library("MASS")
library("car")
Sys.setlocale(locale="en_US.UTF-8")
library("extrafont")
loadfonts()
library("pander")
panderOptions('decimal.mark', ',')
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=((data2$euribor+1)^(1/12)-1)*12/100
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$palukanos=(data2$palukanos[-1]):12
data3$palukanos=(data2$palukanos[-1])/12
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]=data3[,c("dll","nedarbas","infliacija","mhope","phope","pramhope","shope","ta","ul","vhope","vp","gkl")]/100
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
p=t(p)
p=data.frame(p)
kable(p[,1:10])
kable(p[,11:20])

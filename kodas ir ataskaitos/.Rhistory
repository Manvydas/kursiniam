p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation(9) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia){
pirkti=numeric()
for(i in pradzia:168){
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2), data = data3[1:i,c("OMX","SP350","infliacija","mhope","phope","ul","gkl","ip","kursas")])
a=predict(modelis_po_aic, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>5){pirkti=append(pirkti,i)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(100000,gen(pradzia,pirkti))
p=mean(random>graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation(90) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(9) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("dynlm")
library(ggplot2)
library(reshape2)
library("knitr")
library("tseries")
library("MASS")
library(car)
library(lmtest)
library(sandwich)
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia){
pirkti=numeric()
for(i in pradzia:168){
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2), data = data3[1:i,c("OMX","SP350","infliacija","mhope","phope","ul","gkl","ip","kursas")])
a=predict(modelis_po_aic, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>5){pirkti=append(pirkti,i)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(100000,gen(pradzia,pirkti))
p=mean(random>graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation(9) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(15) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(20) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(40) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(20) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
validation(30) #kai pradine imtis 70, atsakymo prasme- tikimybe kad geriau uz random, graza strategijos, vidutine random graza, pirkimo skaicius
lentele=data.frame()
for(i in 30:168){
lentele=rbind(lentele,validation(i))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","graza strategijos","vidutine random graza","tikimybe kad geriau uz random","sandoriu skaicius")
pdf("data_output_kai3.pdf", height=45, width=10)
grid.table(lentele)
dev.off()
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia){
pirkti=numeric()
for(i in pradzia:168){
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2), data = data3[(i-29):i,])
a=predict(modelis_po_aic, data3[(i-pradzia+1):i,])
a=a[length(a)]
if(matrix(a)[1]>3){pirkti=append(pirkti,i)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(100000,gen(pradzia,pirkti))
p=mean(random>graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation(70) # rolling window, kai 70 imtis
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia){
pirkti=numeric()
for(i in pradzia:168){
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2), data = data3[(i-pradzia+1):i,])
a=predict(modelis_po_aic, data3[(i-pradzia+1):i,])
a=a[length(a)]
if(matrix(a)[1]>3){pirkti=append(pirkti,i)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(100000,gen(pradzia,pirkti))
p=mean(random>graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation(70) # rolling window, kai 70 imtis
validation(70) # rolling window, kai 70 imtis
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("dynlm")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("MASS")
library("car")
library("sandwich")
library("lmtest")
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
class(progn)
brezimui=append(progn,data3$OMX[13:length(data3$OMX)])
brezimui
data.frame=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
class(progn)
brezimui=append(progn,data3$OMX[13:length(data3$OMX)])
brezimui
brezimui=append(progn,data3$OMX[13:length(data3$OMX)])
brezimui
brezimui=as.numeric(brezimui)
brezimui
progn
a=data.frame()
a=append(a,progn)
a=data.frame()
a=append(a,progn)
a
n
progn=as.numeric(progn)
a=data.frame()
a=append(a,progn)
a
a=data.frame(progn)
a
a=append(a,progn,data3$OMX[13:length(data3$OMX)])
progn=as.numeric(progn)
a=append(a,progn,data3$OMX[13:length(data3$OMX)])
data3$OMX[13:length(data3$OMX)]
progn
progn=as.numeric(progn)
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn
progn=as.numeric(progn)
progn
a=append(a,progn,data3$OMX[13:length(data3$OMX)])
progn=as.numeric(progn)
progn
data3$OMX[13:length(data3$OMX)]
a=append(a,progn,data3$OMX[12:length(data3$OMX)])
a
progn
progn
progn=as.numeric(progn)
a=append(progn,data3$OMX[12:length(data3$OMX)])
a=cbind(progn,data3$OMX[12:length(data3$OMX)])
a
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[12:length(data3$OMX)])
a=a[complete.cases(data),]
a=a[complete.cases(a),]
rownames(a)<-NULL
a
menesiai=c(1:length(a))
cbind(a,menesiai)
menesiai=c(1:length(a))
cbind(a,menesiai)
a=cbind(a,menesiai)
colnames(a)=c("progn","real","menesiai")
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
akc
a
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:3))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
```
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc, aes(x = menesiai, y = value, colour = variable)) +
geom_line(aes(group=variable)) +
geom_ribbon(data=akc, aes(group = 1, x = xaxis,ymin=output1, ymax=output2),
inherit.aes=FALSE)
ggplot(akc, aes(x = menesiai, y = value, colour = variable)) +
geom_line(aes(group=variable)) +
geom_ribbon(data=akc, aes(group = 1, x = menesiai,ymin=output1, ymax=output2),
inherit.aes=FALSE)
ggplot(akc, aes(x = menesiai, y = value, colour = variable))
ggplot(akc, aes(x = menesiai, y = value)) +
geom_line(aes(group=variable)) +
geom_ribbon(data=akc, aes(group = 1, x = menesiai,ymin=output1, ymax=output2),
inherit.aes=FALSE)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=var1)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
View(data3)
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
View(data3)
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[12:length(data3$OMX)])
a=a[complete.cases(a),]
rownames(a)<-NULL
menesiai=c(1:length(a))
a=cbind(a,menesiai)
colnames(a)=c("progn","real","menesiai")
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
akc
ggplot(akc) + geom_line(aes(x=Var1, y=value, colour=Var2)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc) + geom_line(aes(x=Var1, y=value, colour=Var2)) +
scale_colour_manual(values=c(1:3))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
a
data3
a[,c(1,2,3),]=a[,c(3,2,1)]
a
a[,c(1,2,3),]=a[,c(3,2,1)]
a[,c(1,2,3)]=a[,c(3,2,1)]
a
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[12:length(data3$OMX)])
a=a[complete.cases(a),]
rownames(a)<-NULL
menesiai=c(1:length(a))
a=cbind(a,menesiai)
a
a[,c(1,2,3)]=a[,c(3,2,1)]
a
colnames(a)=c("menesiai","real","progn")
a
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
akc
class(data3)
class(a)
a=data.frame(a)
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
akc
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variables)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų pokyčiai")
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozė ir tikrieji duomenys")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)+geom_hline(yintercept = -5)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)+geom_hline(yintercept = -5)
```
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)+geom_hline(yintercept = -5)+geom_hline(yintercept = -2)+geom_hline(yintercept = 2)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)+geom_hline(yintercept = -5)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 2)+geom_hline(yintercept = -2)
betu_lentele=data.frame()
for(i in 15:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
betu_lentele=rbind(betu_lentele,modelis$coeff)
}
betu_lentele=cbind(betu_lentele,15:168)
colnames(betu_lentele)=c("intercept"," lag(SP350, 1)","lag(infliacija, 2)","lag(mhope, 3)","lag(phope, 12)", "lag(ul, 10)", "lag(gkl, 9)","lag(ip, 4)","lag(kursas, 2)", "paskutinis menesis(is viso po 40 imtyje)")
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
summary(modelis)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 1) + lag(infliacija, 2) + lag(mhope, 3) + lag(phope,12) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 4) + lag(kursas,2), data = data3)
summary(modelis_po_aic)
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11),data=data3)  #reiksmingumui
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #prognozuojantis
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11),data=data3)  #reiksmingumui
summary(modelis)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #reiksmingumui
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #reiksmingumui
summary(modelis)
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #reiksmingumui
summary(modelis)
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
summary(modelis)
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #reiksmingumui
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #reiksmingumui
summary(modelis)
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9)+lag(kursas,2),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+ lag(gkl, 9),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(gkl, 9),data=data3)  #prognozuojantis
kable(coeftest(modelis, vcov=vcovHC)[,])
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(gkl, 9),data=data3)
progn=numeric()
for(i in 10:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(gkl, 9),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[12:length(data3$OMX)])
a=a[complete.cases(a),]
rownames(a)<-NULL
menesiai=c(1:length(a))
a=cbind(a,menesiai)
a[,c(1,2,3)]=a[,c(3,2,1)]
colnames(a)=c("menesiai","real","progn")
a=data.frame(a)
akc = melt(a[,c("progn","real","menesiai")], id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 5)+geom_hline(yintercept = -5)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept =  modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  )+geom_hline(yintercept = -2)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept =  modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)  )+geom_hline(yintercept = -2)
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
ggtitle("Akcijų indeksų mėnesiniai grąžų prognozės ir tikrieji duomenys")+ geom_hline(yintercept = 2)+geom_hline(yintercept = -2)

kable(lentele2)
# Chunk 15
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor2 <- function(x, y, digits=2, cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
test <- cor.test(x,y)
Signif <- ifelse(round(test$p.value,3)<0.001,"p<0.001",paste("p=",round(test$p.value,3)))
text(0.5, 0.25, paste("r=",txt))
text(.5, .75, Signif)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor,...)    #ši funkcija reikalinga grafikų lentelei
#išbrėžti (koreliacijos koeficiento radimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji"))
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji"))
pairs(data3[,c("OMX","infliacija","nedarbas","kursas")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
setwd("..")
setwd("duomenys")
indikatorius="Expectations of the number of orders placed with suppliers over the next 3 months"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
uzsakymu_lukesciai=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(uzsakymu_lukesciai) <- c("Data", "ul")
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
# Chunk 5
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
# Chunk 6
kable(coeftest(modelis, vcov=vcovHC)[,])
summary(modelis)[8]
# Chunk 7
par(mfrow = c(2, 2))
plot(modelis)
# Chunk 8
res<-bptest(modelis)
# p-value < 0.05, tai H0 negalime priimti - duomenys homoskedastiški.
# Chunk 9
Box.test(modelis$res, fitdf=0, type="Lj")
#p-value >0.05, vadinasi H0 neatmetama. Galima teigti, kad liekanos yra baltasis triukšmas.
# Chunk 10
shapiro.test(modelis$residuals)
# p-value > 0.05 - liekanos yra normalios
# Chunk 11
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:158)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
# Chunk 12
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
#kodas parasytas tikrinimui su atsitiktiniu pirkimu, sioje dalyje panaikinsime atsitiktinius pirkimus ir parodysime tik strategiju pirkimus ir pelnus
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>=0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijine graza","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele=lentele[,-c(3,4)]
kable(lentele)
# Chunk 13
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("pradinis imties dydis","strategijos graza","vidutine atsitiktinio pirkimo graza","tikimybe, kad geriau uz random","pirkimu skaicius")
lentele2=lentele2[,-c(3,4)]
kable(lentele2)
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("prad. imt. dyd.","strateg. graza","vid. random graza","tikimybe, kad geriau uz random","pirk. sk.")
kable(lentele2)
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("prad. imt. dyd.","strateg. graza","vid. random graza","tikimybe, kad geriau uz random","pirk. sk.")
kable(lentele2)
lentele2=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele2=rbind(lentele2,validation2(i,formula_prog,formula_kain))
}
lentele2[,c(1:5)]=lentele2[,c(5,2,3,1,4)]
colnames(lentele2)=c("prad. imt. dyd.","strateg. graza","vid. random graza","tikimybe, kad geriau uz random","pirk. sk.")
kable(lentele2)
# Chunk 1
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("ggplot2")
library("reshape2")
library("knitr")
library("tseries")
library("sandwich")
library("lmtest")
# Chunk 2
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
# Chunk 3
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
names(data2)[names(data2) == 'euribor'] <- 'palukanos'
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
data3$SP500=data3$SP500-data3$palukanos
# Chunk 4
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
# Chunk 5
modelis=lm(OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
datafr=data.frame(summary(modelis)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
# Chunk 6
kable(coeftest(modelis, vcov=vcovHC)[,])
summary(modelis)[8]
# Chunk 7
par(mfrow = c(2, 2))
plot(modelis)
# Chunk 8
res<-bptest(modelis)
# p-value < 0.05, tai H0 negalime priimti - duomenys homoskedastiški.
# Chunk 9
Box.test(modelis$res, fitdf=0, type="Lj")
#p-value >0.05, vadinasi H0 neatmetama. Galima teigti, kad liekanos yra baltasis triukšmas.
# Chunk 10
shapiro.test(modelis$residuals)
# p-value > 0.05 - liekanos yra normalios
# Chunk 11
progn=numeric()
for(i in 12:168){
modelis = lm(OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip, 11)+lag(kursas,2),data=data3)
a=predict(modelis, data3[1:i+1,])
progn=append(progn,a[length(a)])
}
progn=as.numeric(progn)
a=cbind(progn,data3$OMX[13:length(data3$OMX)])
a=data.frame(a)
menesiai=c(1:158)
a=cbind(menesiai,a)
rownames(a)=NULL
colnames(a)=c("menesiai","progn", "reali")
akc = melt(a, id=c("menesiai"))
ggplot(akc) + geom_line(aes(x=menesiai, y=value, colour=variable)) +
scale_colour_manual(values=c(1:2))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji")) +
geom_hline(yintercept = 2)+
geom_hline(yintercept = -2)
formula_prog=OMX ~ lag(SP350,1)  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
formula_kain=OMX ~ SP350  + lag(phope,12)  + lag(ul,10)+lag(mhope, 3)+ lag(gkl, 9)+  lag(ip,11)+lag(kursas,2)
#kodas parasytas tikrinimui su atsitiktiniu pirkimu, sioje dalyje panaikinsime atsitiktinius pirkimus ir parodysime tik strategiju pirkimus ir pelnus
gen=function(pradzia,pirkti){
b=sample(pradzia:169,length(pirkti),replace=F)
return(sum(data3[b,"OMX"]))
}
validation=function(pradzia,formula_prog){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm( formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
if(matrix(a)[1]>2){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
validation2=function(pradzia,formula_prog,formula_kain){
pirkti=numeric()
for(i in pradzia:168){
modprog <- lm(formula_prog, data = data3[1:i,])
a=predict(modprog, data3[1:i+1,])
a=a[length(a)]
modkain=lm(formula_kain,data=data3[1:i,])
b=predict(modkain, data3[1:i,])
b=b[length(b)]
b= b-data3[i,"OMX"]
if(matrix(a)[1]>1 & matrix(b)[1]>=0){pirkti=append(pirkti,i+1)}
if(matrix(a)[1]>4 & matrix(b)[1]<0){pirkti=append(pirkti,i+1)}
}
graza=sum(data3[pirkti,"OMX"])
random=replicate(10000,gen(pradzia,pirkti))
p=mean(random<graza)
vidurkis_random = mean(random)
if(p==0){p="nebuvo pirkimu"}
else{
p=append(p,graza)
p=append(p,vidurkis_random)
p=append(p,length(pirkti))
p=append(p,pradzia)
p=round(p,3)
}
return(p)
}
lentele=data.frame()
for(i in c(30,70,100,130,140,150)){
lentele=rbind(lentele,validation(i,formula_prog))
}
lentele[,c(1:5)]=lentele[,c(5,2,3,1,4)]
colnames(lentele)=c("pradinis imties dydis","strategijos premijinė grąža","vidutine atsitiktinio pirkimo premijine graza","tikimybe, kad geriau uz atsitiktini pirkima","pirkimu skaicius")
lentele=lentele[,-c(3,4)]
kable(lentele)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(kk, 12) + lag(shope, 18) + lag(vp, 18) + lag(mp, 12) # +1 lago, nes ip lag(1)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
ccf(data3$OMX,data3$ip)
a=ccf(data3$OMX,data3$ip)
a
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
, data = data3)
ncvTest(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(kk, 14) + lag(nedarbas, 10) + lag(shope, 13) # +2 lago, nes kursas lag(2)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(kk, 19) + lag(nedarbas, 11) + lag(vhope, 21) + lag(vp, 10) + lag(mp, 9) # +9 lago, nes gkl lag(9)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(dll, 10) + lag(vp, 19) + lag(mp, 21) # +10 lago, nes ul lag(10)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(kk, 14) + lag(dll, 13) + lag(shope, 3) + lag(vhope, 4) # +3 lago ,nes phope uzlagintas 3
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(dll, 12) + lag(shope, 12) + lag(ul, 23) + lag(mp, 13) # +12 lago ,nes phope uzlagintas 12
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(nedarbas, 3) + lag(ul, 3) + lag(vhope, 4) + lag(vp, 3) # +3 lago, nes mhope lag(3)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
+
lag(kk, 0) + lag(shope, 8) + lag(vhope, 2) + lag(vp, 0) + lag(mp, 4)  # +0 lago, nes SP350 lag(0)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 1)+ lag(kursas,2)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11)+ lag(kursas,2)
, data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
AIC(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 1)+ lag(kursas,2)
, data = data3)
AIC(modelis_po_aic)
a=ccf(data3$OMX,data3$kursas)
a
modelis = lm(OMX ~ lag(SP350,0) + lag(kk,1) + lag(dll,1) + nedarbas + lag(mhope,3) + lag(phope,12) + lag(pramhope,3) + lag(shope,4) + lag(ul,10) + lag(vhope,4) + lag(vp,0) + lag(mp,1) + lag(gkl,9) + lag(ip,0) + lag(ip,1) + lag(ip,4) + lag(ip, 11) lag(kursas,0) + lag(kursas,2) , data=data3)
boo<-stepAIC((modelis))
modelis = lm(OMX ~ lag(SP350,0) + lag(kk,1) + lag(dll,1) + nedarbas + lag(mhope,3) + lag(phope,12) + lag(pramhope,3) + lag(shope,4) + lag(ul,10) + lag(vhope,4) + lag(vp,0) + lag(mp,1) + lag(gkl,9) + lag(ip,0) + lag(ip,1) + lag(ip,4) + lag(ip, 11) + lag(kursas,0) + lag(kursas,2) , data=data3)
boo<-stepAIC((modelis))
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope,
3) + lag(ul, 10) + lag(vp, 0) + lag(mp, 1) + lag(gkl, 9) +
lag(ip, 11) + lag(kursas, 0) + lag(kursas, 2) , data = data3)
ncvTest(modelis_po_aic)
# Kadangi p-value > 0.05, tai H0 hipotezė priimama - duomenys homoskedastiški.
spreadLevelPlot(modelis_po_aic)
vif(modelis_po_aic)
coeftest(modelis_po_aic, vcov=vcovHC)
lag(ip, 11) + lag(kursas, 2) , data = data3)
ncvTest(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope,
3) + lag(ul, 10) + lag(vp, 0) + lag(mp, 1) + lag(gkl, 9) +
lag(ip, 11) + lag(kursas, 2) , data = data3)
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
ncvTest(modelis_po_aic)
coeftest(modelis_po_aic, vcov=vcovHC)
modelis = lm(OMX ~ lag(SP350,0) + lag(kk,1) + lag(dll,1) + nedarbas + lag(mhope,3) + lag(phope,12) + lag(pramhope,3) + lag(shope,4) + lag(ul,10) + lag(vhope,4) + lag(vp,0) + lag(mp,1) + lag(gkl,9) + lag(ip,0) + lag(ip,1) + lag(ip,4) + lag(ip, 11) + lag(kursas,0) + lag(kursas,2) + lag(kursas,1) , data=data3)
boo<-stepAIC((modelis))
modelis = lm(OMX ~ lag(SP350,0) + lag(kk,1) + lag(dll,1) + nedarbas + lag(mhope,3) + lag(phope,12) + lag(pramhope,3) + lag(shope,4) + lag(ul,10) + lag(vhope,4) + lag(vp,0) + lag(mp,1) + lag(gkl,9) + lag(ip,0) + lag(ip,1) + lag(ip,4) + lag(ip, 11) + lag(kursas,0) + lag(kursas,1) , data=data3)
boo<-stepAIC((modelis))
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope,
3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 11) + lag(kursas,
1) , data = data3)
ncvTest(modelis_po_aic)
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 1)+ lag(kursas,2) , data = data3)
ncvTest(modelis_po_aic)
summary(modelis_po_aic)
modelis_po_aic <- lm(formula = OMX ~ lag(SP350, 0) + lag(mhope, 3) + lag(phope, 12) + lag(pramhope, 3) + lag(ul, 10) + lag(gkl, 9) + lag(ip, 1)+ lag(kursas,1) , data = data3)
ncvTest(modelis_po_aic)
coeftest(modelis_po_aic, vcov=vcovHC)
summary(modelis_po_aic)

summary(mod6)
mod6=lm(formula = OMX ~ SP350 + pramhope  + infliacija, data = data5)
summary(mod6)
modfinal=lm(OMX~SP350 + phope + pramhope + nedarbas + infliacija, data = data3)
summary(modfinal)
modfinal=lm(OMX~SP350  + pramhope  + infliacija, data = data3)
summary(modfinal)
hope=pramhope+mhope+shope+vhope+pramhope
attach(data3)
hope=pramhope+mhope+shope+vhope+pramhope
detach(data3)
hope=data3$pramhope+data3$mhope+data3$shope+data3$vhope+data3$pramhope
hope
hope
lm(OMX~hope,data=data3)
summary(lm(OMX~hope,data=data3))
summary(lm(OMX~SP350+hope,data=data3))
lukesciai=ul+dll
View(data)
lukesciai=data3$ul+data3$dll
summary(lm(OMX~SP350+hope+lukesciai,data=data3))
View(data)
makro= data3$nedarbas+data3$infliacija+data3$kursas
summary(lm(OMX~SP350+hope+lukesciai+makro,data=data3))
summary(lm(OMX~SP350+hope+kursas+euribor+nedarbas+mp+ta+kk+euribor+infliacija,data=data3))
summary(lm(OMX~SP350+hope+kursas+euribor+nedarbas+mp+ta+kk+infliacija,data=data3))
summary(lm(OMX~SP350+hope+kursas+euribor+nedarbas+mp+ta+infliacija,data=data3))
summary(lm(OMX~SP350+hope+nedarbas+mp+ta+infliacija,data=data3))
summary(lm(OMX~SP350+hope+nedarbas+ta+infliacija,data=data3))
summary(lm(OMX~SP350+hope+nedarbas+infliacija,data=data3))
pairs(cbind(data3,hope),upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)         #su diferencijuotais duomenim
summary(lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl,data=data3))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl,data=data3)
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope =lm( hope ~ mp + vp + ul + euribor + infliacija,data=data3)
summary(modhope)
summary(lm(OMX~SP350+hope+nedarbas+infliacija,data=data3))
modhope =lm( hope ~ mp + vp + ul + euribor + infliacija,data=data3)
summary(modhope)
modfinal=lm(OMX~SP350+hope+mp+vp+ul+euribor+infliacija,data=data3)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data5[,c("OMX","SP350","SP500","kursas")] = apply(data2[,c("OMX","SP350","SP500","kursas")],2,log)    #logaritmuojama akcijų kainos, kursas
data5=data.frame(diff(as.matrix(data5)))
data3$euribor=data3$euribor/12
data3=data.frame(diff(as.matrix(data2)))
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2$euribor=data2$euribor/12
data3=data.frame(diff(as.matrix(data2)))
hope=data3$pramhope+data3$mhope+data3$shope+data3$vhope+data3$pramhope
lukesciai=data3$ul+data3$dll
makro= data3$nedarbas+data3$infliacija+data3$kursas
summary(lm(OMX~SP350+hope+lukesciai+makro,data=data3))
summary(lm(OMX~SP350+hope+nedarbas+infliacija,data=data3))
summary(lm(OMX~SP350+hope+nedarbas+infliacija+euribor,data=data3))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl)
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl)
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl)
summary(lm(OMX~SP350+hope+nedarbas+infliacija+euribor+kursas,data=data3))
modhope=lm(hope~SP350+mp+vp+ta+ul+dll+euribor+nedarbas+infliacija+gkl,data=data3)
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope.stepAIC <- stepAIC(modhope, direction=c("both"))
modhope =lm( hope ~ mp + vp + ul + euribor + infliacija,data=data3)
summary(modhope)
summary(modhope)
modfinal=lm(OMX~SP350+hope+mp+vp+ul+euribor+infliacija,data=data3)
summary(modfinal)
str(modfinal)
modhope =lm( hope ~ mp + vp + ul + euribor + infliacija,data=data3)
summary(modhope)
summary(modfinal)
modfinal=lm(OMX~SP350+hope+euribor+infliacija,data=data3)  #euribor del koreliacijos itraukiu
summary(modfinal)
str(modfinal)
l
summary(modfinal)
modfinal=lm(OMX~SP350+hope+euribor+infliacija,data=data3)  #euribor del koreliacijos itraukiu
summary(modfinal)
summary(modfinal)
modfinal2=lm(OMX~SP350,data=data3)
summary(modfinal)
summary(modfinal2)
AIC(modfinal)
AIC(modfinal2)
AIC(modfinal)
AIC(modfinal2)
summary(modfinal)
summary(modfinal2)
modfinal=lm(OMX~SP350+hope+euribor+infliacija,data=data3)  #euribor del koreliacijos itraukiu
summary(modfinal)
hope
OMX
View(data3)
pairs(data3,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)         #su diferencijuotais duomenim
data3[,c("mhope","shope","phope","vhope","pramhope")]
test=data3[,c("OMX","mhope","shope","phope","vhope","pramhope")]
test=data3[,c("OMX","mhope","shope","phope","vhope","pramhope")]
pairs(test,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
test2=cbind(data3$OMX,hope)
pairs(test2,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor2 <- function(x, y, digits=2, cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
test <- cor.test(x,y)
Signif <- ifelse(round(test$p.value,3)<0.001,"p<0.001",paste("p=",round(test$p.value,3)))
text(0.5, 0.25, paste("r=",txt))
text(.5, .75, Signif)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor,...)    #ši funkcija reikalinga grafikų lentelei
#išbrėžti (koreliacijos koeficiento radimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
#gkl turi neigiamas reikšmes, negalime logaritmuot, palieku šią problema nors bandžiau spręst (praleisti)
#min_abs_gkl=data2$gkl + data2$gkl %>% min() %>% abs()    #kad galetume logaritmuot, pridedu maziausio skaiciaus moduli
#data2$gkl = data2$gkl + min_abs_gkl
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data5[,c("OMX","SP350","SP500","kursas")] = apply(data2[,c("OMX","SP350","SP500","kursas")],2,log)    #logaritmuojama akcijų kainos, kursas
data5=data.frame(diff(as.matrix(data5)))
#data2[ data2 == "-Inf" ] = NA          šis kodas susijęs su gkl logaritmavimu (praleisti)
#data3=data2[complete.cases(data2),]
data2$euribor=data2$euribor/12
data3=data.frame(diff(as.matrix(data2)))
data3[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = data3[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] *100
test=data3[,c("OMX","mhope","shope","phope","vhope","pramhope")]
pairs(test,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
test2=cbind(data3$OMX,hope)
pairs(test2,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
pairs(data3,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)         #su diferencijuotais duomenim
test=data3[,c("OMX","mhope","shope","phope","vhope","pramhope")]
pairs(test,upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
modfinal=lm(OMX~SP350  + pramhope  + infliacija, data = data3)
summary(modfinal)
modfinal=lm(OMX~SP350+hope+euribor+infliacija,data=data3)  #euribor del koreliacijos itraukiu
modfinal2=lm(OMX~SP350,data=data3)
summary(modfinal)
summary(modfinal2)
AIC(modfinal)
AIC(modfinal2)
summary(modfinal)
summary(modfinal)
summary(modfinal2)
AIC(modfinal2)
AIC(modfinal)
modfinal=lm(OMX~SP350  + pramhope  + infliacija, data = data3)
AIC(modfinal)
modfinal=lm(OMX~SP350+hope+infliacija,data=data3)  #euribor del koreliacijos itraukiu
summary(modfinal)
AIC(modfinal)
modfinal=lm(OMX~SP350+hope+infliacija,data=data3)  #euribor del koreliacijos itraukiu
AIC(modfinal)
modfinal=lm(OMX~SP350  + pramhope  + infliacija, data = data3)
AIC(modfinal)
modfinal=lm(OMX~SP350  + pramhope  + infliacija, data = data3)
summary(modfinal)
modfinal=lm(OMX~SP350+hope+infliacija,data=data3)  #euribor del koreliacijos itraukiu
summary(modfinal)
setwd("..")
pirmas
setwd("duomenys")
indikatorius="Business activity (sales) development over the past 3 months"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
verslo_aktyvumas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
istraukimas2 <- function(salis,folderio_pav,failo_pav,indikatorius){
setwd(folderio_pav)
data=read.csv(failo_pav)
data = data[data$S_ADJ=="Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",]
data = data[data$GEO == salis,]
setwd('..')
data = data[data$INDIC == indikatorius,]
return(select(data,TIME,Value))
}
istraukimas3 <- function(salis,folderio_pav,failo_pav){
setwd(folderio_pav)
data=read.csv(failo_pav)
data = data[data$S_ADJ=="Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",]
data = data[data$GEO == salis,]
setwd('..')
data = data[data$UNIT=="Percentage change over previous period",]
return(select(data,TIME,Value))
}
```
---
title: "rawdataistraukimas"
author: "Manvydas Sokolovas ir Paulius Kostickis"
date: "10/13/2016"
output:
pdf_document:
keep_tex: yes
latex_engine: xelatex
---
Reikiamos bibliotekos:
```{r}
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("data.table")
```
Duomenų ištraukimo funkcija:
```{r}
istraukimas <- function(salis,folderio_pav,failo_pav){
setwd(folderio_pav)
data=read.csv(failo_pav)
data = data[data$S_ADJ=="Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",]
data = data[data$GEO == salis,]
setwd('..')
data = data[data$UNIT=="Index, 2010=100",]
return(select(data,TIME,Value))
}
istraukimas2 <- function(salis,folderio_pav,failo_pav,indikatorius){
setwd(folderio_pav)
data=read.csv(failo_pav)
data = data[data$S_ADJ=="Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",]
data = data[data$GEO == salis,]
setwd('..')
data = data[data$INDIC == indikatorius,]
return(select(data,TIME,Value))
}
istraukimas3 <- function(salis,folderio_pav,failo_pav){
setwd(folderio_pav)
data=read.csv(failo_pav)
data = data[data$S_ADJ=="Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",]
data = data[data$GEO == salis,]
setwd('..')
data = data[data$UNIT=="Percentage change over previous period",]
return(select(data,TIME,Value))
}
```
Nuskaitomi OMX Vilnius duomenys:
```{r}
setwd("..")
setwd("duomenys")
omx=read.csv("omx.csv")
duom=select(omx,OMX.raw,OMXV.Value)
colnames(duom) <- c("Data", "Verte")
ts <- xts(duom$Verte, as.Date(duom$Data, "%m/%d/%Y"))
ts_m = apply.monthly(ts, last)
colnames(ts_m) <- c("OMX")
```
Kasyba ir karjerų eksploatacija:
```{r}
setwd("..")
setwd("duomenys")
salis="Lithuania"
folderio_pav="Turnover in industry - consumer durables"
failo_pav="sts_intv_m_1_Data.csv"
kasyba_karjerai=istraukimas(salis,folderio_pav,failo_pav)
colnames(kasyba_karjerai) <- c("Data", "kk")
```
Mažmeninė prekyba, išskyrus variklinių transporto priemonių ir motociklų prekybą(defliuotas):
```{r}
setwd("..")
setwd("duomenys")
folderio_pav="Turnover and volume of sales in wholesale and retail trade - monthly data"
failo_pav="sts_trtu_m_1_Data.csv"
mazmenine_prekyba=istraukimas(salis,folderio_pav,failo_pav)
colnames(mazmenine_prekyba) <- c("Data", "mp")
```
Statybų pasitikėjimas:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Construction confidence indicator"
folderio_pav="Sentiment indicators - monthly data"
failo_pav="ei_bssi_m_r2_1_Data.csv"
statybu_pasitikejimas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(statybu_pasitikejimas) <- c("Data", "shope")
```
Paslaugų pasitikėjimas:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Services Confidence Indicator"
folderio_pav="Sentiment indicators - monthly data"
failo_pav="ei_bssi_m_r2_1_Data.csv"
paslaugu_pasitikejimas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(paslaugu_pasitikejimas) <- c("Data", "phope")
```
Vartotojų pasitikėjimas:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Consumer confidence indicator"
folderio_pav="Sentiment indicators - monthly data"
failo_pav="ei_bssi_m_r2_1_Data.csv"
vartotoju_pasitikejimas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(vartotoju_pasitikejimas) <- c("Data", "vhope")
```
Mažmeninis pasitikėjimas:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Retail confidence indicator"
folderio_pav="Sentiment indicators - monthly data"
failo_pav="ei_bssi_m_r2_1_Data.csv"
mazmeninis_pasitikejimas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius) #mažmeninės prekybos pasitikėjimo rodiklis
colnames(mazmeninis_pasitikejimas) <- c("Data", "mhope")
```
Pramonės pasitikėjimas:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Industrial confidence indicator"
folderio_pav="Sentiment indicators - monthly data"
failo_pav="ei_bssi_m_r2_1_Data.csv"
pramones_pasitikejimas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(pramones_pasitikejimas) <- c("Data", "pramhope")
```
Verslo plėtra per 3 mėnesius:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Business activity (sales) development over the past 3 months"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
verslo_aktyvumas=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(verslo_aktyvumas) <- c("Data", "vp")
```
Turimos akcijos:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Volume of stocks currently hold"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
turimos_akcijos=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(turimos_akcijos) <- c("Data", "ta")
```
Užsakymų lūkesčiai:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Expectations of the number of orders placed with suppliers over the next 3 months"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
uzsakymu_lukesciai=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(uzsakymu_lukesciai) <- c("Data", "ul")
```
Darbo Lygio lūkesčiai:
```{r}
setwd("..")
setwd("duomenys")
indikatorius="Employment expectations over the next 3 months"
folderio_pav="lukseciai ir turimos akcijos ir verslo pletra"
failo_pav="ei_bsrt_m_r2_1_Data.csv"
darbo_lygio_lukesciai=istraukimas2(salis,folderio_pav,failo_pav,indikatorius)
colnames(darbo_lygio_lukesciai) <- c("Data", "dll")
```
Nedarbas:
```{r}
setwd("..")
setwd("duomenys/nedarbas")
data = read.csv("ei_lmhu_m_1_Data.csv")
data = data[data$GEO == salis,]
nedarbas = select(data,TIME,Value)
colnames(nedarbas) <- c("Data", "nedarbas")
setwd("..")
```
Infliacija:
```{r}
setwd("..")
setwd("duomenys/infliacija")
data = read.csv("prc_hicp_mv12r_1_Data.csv")
data = data[data$GEO == salis,]
infliacija = select(data,TIME,Value)
colnames(infliacija) <- c("Data", "infliacija")
setwd("..")
```
S&P 500:
```{r}
setwd("..")
setwd("duomenys/S&P 500")
data = read.csv("YAHOO-INDEX_GSPC.csv")
SP500=select(data,Date,Adjusted.Close)
colnames(SP500) <- c("Data", "SP500")
setwd("..")
```
S&P 350 Europe:
```{r}
setwd("..")
setwd("duomenys/S&P 350 Europe")
data = read.csv("GOOG-NYSEARCA_IEV.csv")
SP350=select(data,Date,Close)
colnames(SP350) <- c("Data", "SP350")
```
Gamintojų kainų lygis:
```{r}
setwd("..")
setwd("duomenys")
folderio_pav="Domestic producer prices - total industry (excluding construction)"
failo_pav="sts_inppd_m_1_Data.csv"
gamintoju_kainos=istraukimas3(salis,folderio_pav,failo_pav)
colnames(gamintoju_kainos) <- c("Data", "gkl")
```
Euribor:
```{r}
setwd("..")
setwd("duomenys")
failo_pav="euribor.csv"
setwd("Euribor 3-month - Historical close, average of observations through period")
euribor=read.csv(skip=4,failo_pav)
colnames(euribor)=c("Data","euribor")
euribor=euribor %>% arrange(-row_number())
euribor$Data=as.yearmon(euribor$Data, format = "%Y%b")
euribor$Data=format(euribor$Data, "%YM%m")
```
Industrinė produkcija:
```{r}
setwd("..")
setwd("duomenys")
folderio_pav="Production in industry - monthly data"
failo_pav="sts_inpr_m_1_Data.csv"
industrine_produkcija=istraukimas(salis,folderio_pav,failo_pav)
colnames(industrine_produkcija) <- c("Data", "ip")
```
Valiutos kursas:
```{r}
setwd("..")
setwd("duomenys")
failo_pav="eur_us.csv"
setwd("euras doleris")
kursas=read.csv(skip=4,failo_pav)
colnames(kursas)=c("Data","kursas")
kursas=kursas %>% arrange(-row_number())
kursas <- xts(kursas$kursas, as.Date(kursas$Data, "%Y-%m-%d"))
kursas_m = apply.monthly(kursas, last)
kursas_m = data.frame(kursas_m)
kursas_m = setDT(kursas_m, keep.rownames = TRUE)
colnames(kursas_m) = c("Data", "kursas")
kursas_m$Data <- format(as.Date(kursas_m$Data), "%YM%m")
```
Sujungiami duomenys į vieną lentelę:
```{r}
data=full_join(SP350,SP500,by="Data")
data = data %>% arrange(-row_number())
dataset=Reduce(function(x, y) merge(x, y, all=TRUE), list(kasyba_karjerai, darbo_lygio_lukesciai,nedarbas, infliacija, mazmeninis_pasitikejimas, paslaugu_pasitikejimas, pramones_pasitikejimas, statybu_pasitikejimas, turimos_akcijos, uzsakymu_lukesciai, vartotoju_pasitikejimas, verslo_aktyvumas, mazmenine_prekyba,euribor[-length(euribor),], gamintoju_kainos, industrine_produkcija, kursas_m[-length(kursas_m),]))
Data=dataset$Data
dataset=dataset %>% select(-Data)
OMX=data.frame(ts_m)
n=nrow(OMX)
datafin=cbind(data[1:n,] %>% select(c(SP350,SP500)), dataset[1:n,])
datafin=cbind( OMX,datafin )
rownames(datafin) <- NULL
Data=Data %>% head(n)
rawdata=cbind( Data,datafin)
``
setwd("..")
setwd("..")
setwd("kodas ir ataskaitos")
write.csv(rawdata, file = "rawdata.csv",row.names=FALSE)
```

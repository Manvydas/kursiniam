p=apply(data3,2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]*100
data2$euribor=data2$euribor/12   # du kartus dalinamas is 12?
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kursas","kk","mp","ip")]*100
data2$euribor=data2$euribor   # du kartus dalinamas is 12?
data3=data.frame(diff(as.matrix(data2)))
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
```
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
summary(lm(formula = OMX ~ SP350 + nedarbas  + phope + pramhope +
vhope  + lag(euribor, 1) + lag(euribor, 3) + lag(euribor,
6) , data = data3))
summary(lm(formula = OMX ~ SP350 + nedarbas  + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
summary(lm(formula = OMX ~ SP350 + lag(nedarbas,1)  + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
summary(lm(formula = OMX ~ SP350 + lag(nedarbas,0)  + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
summary(lm(formula = OMX ~ SP350 + nedarbas + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("dynlm")
library(ggplot2)
library(reshape2)
library("knitr")
library("tseries")
library("MASS")
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
View(data)
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
?sqrt
(data2$euribor+1)^(1/12)
((data2$euribor+1)^(1/12)-1)*12
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
data3=data.frame(diff(as.matrix(data2)))
View(data3)
View(data)
View(data)
View(data3)
View(data)
View(data2)
View(data3)
View(data)
View(data3)
data3$euribor=data2$euribor
data3$euribor=data2$euribor[-1]
View(data3)
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
p=apply(data3,2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
p=apply(data3[,-euribor],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-"euribor""],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-"euribor"],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-"euribor"],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-"euribor"],2,function(i)adf.test(i,k=1)$p.value)
View(data3)
p=apply(data3[,-"euribor"],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-euribor],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-select(data3,euribor)],2,function(i)adf.test(i,k=1)$p.value)
select(data3,euribor)
select(data3,"euribor")
View(data3)
data3[,euribor]
data3[,"euribor"]
?select
p=apply(data3[,-select(data3,euribor)],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-select(data3,euribor)],2,function(i)adf.test(i,k=1)$p.value)
select(data3,euribor)
select(data3,euribor)
euribor
data3[,"euribor"]
data3[,"euribor"]
p=apply(data3[,-select(data3,euribor)],2,function(i)adf.test(i,k=1)$p.value)
p=apply(data3[,-select(data3,data3$euribor)],2,function(i)adf.test(i,k=1)$p.value)
select(data3,data3$euribor)
data3[,"euribor"]
-select(data3,data3$euribor)
-select(data3,euribor)
View(data3)
select(data3,OMX)
View(data3)
select(data3,OMX)
View(data3)
View(data2)
class(data3)
data3[,euribor]
View(data3)
data3[,-4]
data3[,"euribor"]
data3[,-"euribor"]
data3[,-("euribor")]
data3[,-c("euribor")]
data3[,-euribor]
select(data3)
select(data3,3)
select(data3,OMX)
mod_po_aic <- lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope + ul, data = data3)
ncvTest(lmMod)
library(car)
ncvTest(lmMod)
ncvTest(mod_po_aic)
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
```
colnames(data3$euribor)="palukanos"
names(data3)[names(data3) == 'euribor'] <- 'palukanors'
View(data3)
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
infliacija=diff(data3$infliacija)
data3$infliacija
infliacija
data3=[-1,]
data3=data3[-1,]
data3$infliacija=infliacija
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp + euribor + gkl + ip + kursas, data=data3)
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp  + gkl + ip + kursas, data=data3)
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + pramhope, data = data3))
stepAIC(mod)
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + pramhope, data = data3))
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope +
ul, data = data3))
mod_po_aic <- lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope + ul, data = data3)
mod_po_aic
ncvTest(mod_po_aic) #heteroskedastiskumas
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
mod=lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3)
ncvTest(mod) #heteroskedastiskumas
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp  + gkl + ip + kursas, data=data3)
step(mod,direction="both",test="F")
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
?step
drop1(mod, test = "F")
drop1(mod, test = "F")
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
summary(lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3))
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
summary(lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3))
View(data3)
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + pramhope, data = data3))
summary(lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3))
mod=summary(lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3))
mod$res
plot(mod$res)
plot(mod$res,type="l")
library(lmtest)
library(sandwich)
coeftest(mod,df=inf,vcov=vcovHC(mod,type="HC4"))
coeftest(mod,df=inf,vcov=vcovHC(mod,type="HC4"))
mod
coeftest(mod,df=inf,vcov=vcovHC(mod,type="HC4"),data=data3)
?coeftest
coeftest(mod,data=data3df=inf,vcov=vcovHC(mod,type="HC4"))
coeftest(mod,data=data3,df=inf,vcov=vcovHC(mod,type="HC4"))
View(data3)
data3 %>% select(OMX)
data3 %<% select(OMX)
data3 %>% select(OMX)
data3 %>% select(OMX)
data3 %>% select(,OMX)
data3[,-c(OMX)]
data3[,-c("OMX")]
View(data3)
data3[1,]
data3[5,]
class(data3)
class(data)
data[1,]
data[5,]
data[5,]
data3[,-c("OMX")]
?select
mod = lm(OMX ~ SP350 + kk +lag(kk,1) + dll+ lag(dll,1) + nedarbas +lag(nedarbas,1)+ infliacija+lag(infliacija,1) + mhope +lag(mhope,1)+ phope +lag(phope,1)+ pramhope+lag(pramhope,1) + shope+lag(shope,1) + ta +lag(ta,1)+ ul +lag(ul,1)+ vhope + lag(vhope,1)+vp+lag(vp,1) + mp+lag(mp,1)  + gkl+lag(gkl,1) + ip +lag(ip,1)+ kursas+lag(kursas,1), data=data3)
step(mod,direction="both",test="F")
summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) + lag(mhope, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + mp + lag(mp, 1) +
lag(kursas, 1), data = data3))
summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) + lag(mhope, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + mp + lag(mp, 1) , data = data3))
summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + mp + lag(mp, 1) , data = data3))
summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + mp, data = data3))
summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + lag(mp, 1) , data = data3))
mod2=summary(lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + lag(mp, 1) , data = data3))
aic(mod2)
AIC(mod2)
AIC(mod2)
mod2=lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + lag(mp, 1) , data = data3)
AIC(mod2)
mod=lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3)
AIC(mod2)
AIC(mod)
mp
```{r, message=FALSE, echo=FALSE}
library("quantmod")
library("forecast")
library("xts")
library("dplyr")
library("gridExtra")
library("dynlm")
library(ggplot2)
library(reshape2)
library("knitr")
library("tseries")
library("MASS")
library(car)
library(lmtest)
library(sandwich)
```
\begin{titlepage}
\centerline{\bf \large Vilniaus Universitetas}
\bigskip
\centerline{\large \textbf{Matematikos ir informatikos fakultetas}}
\vskip 120pt
\centerline{\bf \Large \textbf{Kursinis darbas}}
\vskip 50pt
\begin{center}
{\bf \LARGE Lietuvos akcijų rinkos grąžos priklausomybė nuo makroekonominių duomenų}
\end{center}
\bigskip
\centerline{\Large \textbf{Kursinio vadovas: lektorius dr. Dmitrij Celov}}
\bigskip
\centerline{\Large \textbf{Darbą atliko: Manvydas Sokolovas ir Paulius Kostickis}}
\vskip 90pt
\vskip 120pt
\centerline{\large \textbf{VILNIUS 2016}}
%\newpage
\end{titlepage}
\textwidth 6.5in
\textheight 9.00in
\renewcommand{\contentsname}{Turinys}
\tableofcontents
\thispagestyle{empty}
\newpage
# Aprašymas:
Yra atlikti tyrimai Šri Lankos, Indijos rinkose, kurie parodė, jog makroekonominiai rodikliai, tokie kaip nedarbas, infliacija, valiutos kursas, palūkanų dydis, turi įtakos tų rinkų akcijų grąžai. Rusijos rinkoje, remiantis „Arbitrage Pricing Theory” buvo atlikta tiesinė regresija, kuri nerado makroekonominių duomenų įtakos. Todėl mes nutarėme ištirti Lietuvos akcijų rinkos grąžos priklausomybę nuo makroekonominių duomenų.
Lietuvos akcijų rinka reprezentuos OMX Vilnius indeksas, kurį sudaro 32 lietuviškų listinguojamų įmonių akcijos. Bus skaičiuojama jo grąža ir bus analizuojama, kiek tą grąžą paaiškina mėnesiniai makroekonominiai duomenys tokie kaip infliacija, nedarbas, palūkanų norma, produkcijos kiekiai. Remiantis „Arbitražo įkainojimo teorema” (APT) sukursime regresiją, kurią iš esmės sudaro „Ilgalaikio turto įkainojimo modelis” ir makroekonomiai duomenys.
# Kintamieji
Darbe naudojami mėnesiniai duomenys nuo 2002 metų birželio iki 2016 metų liepos. Duomenys gauti iš Eurostat ir Europos Centrinio Banko svetainių. Susiduriama su mėnesinių rodiklių trūkumu: BVP, gyventojų pajamos, pinigų paklausa yra ketvirtiniai duomenys. Taip pat žvelgiant pasauliniu mastu, Vilniaus akcijų birža yra smulki, o akcijų likvidumas čia taip pat žemas. Nepaisant šių problemų, buvo rasta koreliacija tarp kai kurių makroekonominių duomenų ir OMX Vilnius indekso grąžų.
* S&P 350 Europe - tai indeksas sudarytas iš 350 didžiausių Europos imonių akcijų.
* S&P 500 - tai indeksas sudarytas iš 500 didžiausių Amerikos imonių akcijų.
* Euribor 3 mėnesių - palūkanų norma už kurią Europos bankai skolina pinigus vieni kitiems trijų mėnesių laikotarpiui.
* JAV dolerio ir Euro valiutos kursas.
* Nedarbas - darbingų nedirbančių žmonių skaičius 1000 žmonių.
* Pramonės gamintojų kainos  - matuoja vidutinę kainų raidą, visų produktų bei paslaugų iš pramonės sektoriaus ir parduotų vidinėje rinkoje. Procentinis pokytis nuo praeito mėnesio.
* Infliacija - 12 mėnesių infliacija apskaičiuota pagal mažmeninės prekybos indeksą.
* Industrinė produkcija - indeksas matuoja produkcijos kiekį nuo gamybos, kasybos, elektros ir dujų pramonės. Atskaitiniai metai 2010 (2010m. indeksas = 100).
* Darbo lygio ir užsakymų lūkesčiai - mėnesinės apklausos, teigiamų ir neigiamų atsakymų santykis.
* Pasitikėjimo indikatoriai - pramonės, mažmeninės prekybos, vartotojų, paslaugų, statybų. Tai yra apklausų teigiamų ir neigiamų atsakymų santykis.
* Mažmeninė prekyba, išskyrus variklinių transporto priemonių ir motociklų prekybą- indeksuotas rodiklis (2010m indeksas = 100).
\newpage
# Duomenų transformacijos
Duomenys naudojami nuo 2002 metų iki 2016 metų, ankstesnių duomenų nepavyko išgauti.
OMX Vilnius indeksas transformuojamas į mėnesinius procentinius pokyčius: jei OMX indekso mėnesinė kaina nuo laiko (mėnesio)  t žymėsime *X(t)*, tai *r(t)* = (log(*X(t)*) – log(*X(t-1)*) ) $\times$ 100 %, čia *r(t)* yra indekso mėnesinis pokytis procentais.
Tokiu pačiu būdu gaunama kitų akcijų indeksų grąža logaritmuojant ir diferencijuojant S&P500, S&P350 indeksų kainas. Kasybos ir karjerų eksploatacijos indeksas, mažmeninės prekybos indeksas, industrinės produkcijos indeksas yra taip pat logaritmuojami ir diferencijuojami. Visi logaritmuoti duomenys padauginami iš šimto, kad pokytis būtų interpretuojamas procentais. Euribor yra dalinamas iš 12 ir diferencijuojamas, kad būtų gautas mėnesinis pokytis. Nedarbas dalinamas iš 10 (bedarbių skaičius tenkantis 1000 gyventojų, padalinę iš 10 gauname procentais) ir taip pat yra diferencijuojamas. Dolerio/euro valiutų kursas, pasitikejimo ir lūkesčių rodikliai yra diferencijuojami. Diferencijavimu šiuo atveju vadiname šio mėnesio duomenų atėmimą iš praeito periodo(mėnesio) duomenų.
Tikrinami duomenys po transformacijų ar turi vienetinę šaknį (stacionarumo tikrinimas), atliekamas Dickey-Fuller testas:
```{r, message=FALSE, echo=FALSE}
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
```
```{r, message=FALSE, echo=FALSE,warning =FALSE}
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
infliacija=diff(data3$infliacija)
data3=data3[-1,]
data3$infliacija=infliacija
p=apply(data3[,],2,function(i)adf.test(i,k=1)$p.value)
p=data.frame(p)
p[,1] = round(p[,1], digits = 2)
kable(p)
```
* Visų kintamųjų, išskyrus infliaciją, p - value mažiau už 0.05, galime atmesti H0, kad turi vienetinę šaknį, visi kintamieji, išskyrus infliaciją, yra stacionarūs.
\newpage
# Duomenų vizualizacija
```{r, message=FALSE, echo=FALSE}
data=read.csv("rawdata.csv")
data[ data == ":" ] = NA
data=data[complete.cases(data),]
rownames(data)<-NULL
```
```{r, message=FALSE, echo=FALSE}
panel.hist <- function(x, ...)    #ši funkcija reikalinga grafikų lentelei išbrėžti (histogramos pateikimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor2 <- function(x, y, digits=2, cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
test <- cor.test(x,y)
Signif <- ifelse(round(test$p.value,3)<0.001,"p<0.001",paste("p=",round(test$p.value,3)))
text(0.5, 0.25, paste("r=",txt))
text(.5, .75, Signif)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor,...)    #ši funkcija reikalinga grafikų lentelei
#išbrėžti (koreliacijos koeficiento radimui)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
```
```{r, message=FALSE, echo=FALSE}
data2=apply(data[,-1],2,as.numeric)
rownames(data2)=data[,1]
data2=data.frame(data2)
data2$nedarbas=data2$nedarbas/10
data2[,c("OMX","SP350","SP500","kk","mp","ip")] = apply(data2[,c("OMX","SP350","SP500","kk","mp","ip")],2,log)    #logaritmuojama indeksai, akcijų kainos, kursas
data2[,c("OMX","SP350","SP500","kk","mp","ip")]=data2[,c("OMX","SP350","SP500","kk","mp","ip")]*100
data2$euribor=((data2$euribor+1)^(1/12)-1)*12                    #reiketu gal menesio?
data3=data.frame(diff(as.matrix(data2)))
data3$euribor=data2$euribor[-1]
names(data3)[names(data3) == 'euribor'] <- 'palukanos'
data3$gkl = data$gkl[-1]    #gamintoju kainu lygio nereik diferencijuot nes jau yra pokytis %
#tsdisplay(data3$infliacija)
infliacija=diff(data3$infliacija)
data3=data3[-1,]
data3$infliacija=infliacija
```
```{r, message=FALSE, echo=FALSE}
Data = rownames(data3)
Data=as.yearmon(Data, "%YM%m")
data3=cbind.data.frame(Data, data3)
```
<br>
Akcijų indeksų mėnesiniai procentiniai pokyčiai:
```{r, message=FALSE, echo=FALSE}
akc = melt(data3[,c("OMX","SP350","SP500","Data")], id=c("Data"))
ggplot(akc) + geom_line(aes(x=Data, y=value, colour=variable)) +
scale_colour_manual(values=c(1:4))+ylab("% pokytis")+
guides(col=guide_legend(title="Kintamieji"))
```
* Tikėtina, jog S&P350 ir S&P500 indeksų svyravimai tūrėtų būti labai panašūs, taigi pažiūrėjus į grafiką galime matyti, jog jų kreivės juda panašiai, tai yra šie dydžiai stipriai koreliuoti.
* OMX Vilnius kreivės svyravimai panašūs, tačiau nevisai sutampa su S&P indeksų. Todėl galima manyti, jog šie dydžiai yra gana silpnai koreliuoti.
\newpage
Akcijų rinkų koreliacija:
```{r, message=FALSE, echo=FALSE}
pairs(data3[,c("OMX","SP350","SP500")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
```
* S&P350 ir S&P500 indeksų koreliacija reikšminga ir jie stipriai koreliuoja. Europos ir JAV akcijų rinkų svyravimai yra glaudžiai susiję.
* Kaip ir teigta anksčiau OMX Vilnius koreliacija su S&P indeksais yra reikšminga, tačiau nėra didelė. Nesimato stiprios įtakos iš lyderiaujančių pasaulio rinkų.
\newpage
Kintamųjų koreliacija su OMX Vilnius. r - koreliacijos koeficientas, p - koreliacijos reiksmingumas:
```{r, message=FALSE, echo=FALSE}
pairs(data3[,c("OMX","infliacija","nedarbas","kursas")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
```
```{r, message=FALSE, echo=FALSE}
pairs(data3[,c("OMX","mhope","phope","vhope","pramhope","vp")],upper.panel=panel.smooth,diag.panel=panel.hist, lower.panel=panel.cor2)
```
* Kaip ir buvo tikėtasi tarp kintamųjų ir OMX Vilnius rasta nestipri koreliacija, tačiau reikšminga.
\newpage
# Modeliavimas
```{r, message=FALSE, echo=FALSE}
data3$OMX=data3$OMX-data3$palukanos
data3$SP350=data3$SP350-data3$palukanos
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp  + gkl + ip + kursas, data=data3)
mod = lm(OMX ~ SP350 + kk +lag(kk,1) + dll+ lag(dll,1) + nedarbas +lag(nedarbas,1)+ infliacija+lag(infliacija,1) + mhope +lag(mhope,1)+ phope +lag(phope,1)+ pramhope+lag(pramhope,1) + shope+lag(shope,1) + ta +lag(ta,1)+ ul +lag(ul,1)+ vhope + lag(vhope,1)+vp+lag(vp,1) + mp+lag(mp,1)  + gkl+lag(gkl,1) + ip +lag(ip,1)+ kursas+lag(kursas,1), data=data3)
data4 <- df[, -which(names(df) %in% c("name1", "name2", "name3"))]
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + pramhope, data = data3))
stepAIC(mod)
summary(lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope +
ul, data = data3)) # uzsakymu lukesciai atrodo nelogiskas, matyt paslinktas
summary(lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3))
mod=lm(formula = OMX ~ SP350 + phope + pramhope + vhope, data = data3)
ncvTest(mod) #heteroskedastiskumas
summary(lm(formula = OMX ~ lag(euribor,15), data = data3))
mod = lm(OMX ~ SP350 + kk + dll + nedarbas + infliacija + mhope + phope + pramhope + shope + ta + ul + vhope + vp + mp + euribor + gkl + ip + kursas+lag(euribor,1)+lag(euribor,2)+lag(euribor,3)+lag(euribor,4)+lag(euribor,5)+lag(euribor,6)+lag(euribor,7)+lag(euribor,8)+lag(euribor,9), data=data3)
stepAIC(mod)
summary(lm(formula = OMX ~ SP350 + nedarbas  + phope + pramhope +
vhope  + lag(euribor, 1) + lag(euribor, 3) + lag(euribor,
6) , data = data3))
summary(lm(formula = OMX ~ SP350 + nedarbas  + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
#kaip su zymejimu? OMX 2012M2 tai kiek paaugo per 2012M1 iki 2012M2? ar tai tas pats su kitais rodikliais? Rodikliai turetu buti su lagu?
summary(lm(formula = OMX ~ SP350 + nedarbas + phope + pramhope +
vhope  + lag(euribor, 1) , data = data3))
#OMX indeksas <5mlrd eur, jei maziau negu <5lrd $ galima skaityti kaip mazos kapitalizacijos Amerikos kompanija, dideles rizikos, del to mazesne koreliacija su rinkomis
#One is that small-cap stocks have a lower trading liquidity. For investors, this means enough shares at the right price may be unavailable when they wish to buy, or at times, it may be difficult to sell shares quickly at favorable prices.
#Another aspect is that, in comparison to large-cap companies, small-cap firms generally have less access to capital and, overall, not as many financial resources. This makes it difficult for smaller companies to obtain necessary financing to bridge gaps in cash flow, fund new market growth pursuits or undertake large capital expenditures. This problem can become more severe for small-cap companies during economic cycle lows.
#Read more: How do the risks of large cap stocks differ from the risks of small cap stocks? | Investopedia http://www.investopedia.com/ask/answers/032615/how-do-risks-large-cap-stocks-differ-risks-small-cap-stocks.asp#ixzz4OeTYhmLS
step(mod,direction="both",test="F")
mod2=lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + lag(mp, 1) , data = data3)
AIC(mod2)
mod=lm(formula = OMX ~ SP350 + pramhope + vhope, data = data3)
AIC(mod)
coeftest(mod,data=data3,df=inf,vcov=vcovHC(mod,type="HC4"))
plot(mod$res,type="l")
```
```{r}
mod_po_aic <- lm(formula = OMX ~ SP350 + nedarbas + infliacija + phope + pramhope + ul, data = data3)
```
```{r, message=FALSE, echo=FALSE}
datafr=data.frame(summary(mod_po_aic)[c(4,8)] %>%  lapply(round,2))
colnames(datafr)=c("beta koeficientai","standartinis nuokrypis","koeficientu t reikšmes","p reiksme", "R kvadratas")
rownames(datafr)=c("beta nulinis","S&P350","nedarbas","infliacija","paslaugu pasitikejimas", "pramones pasitikejimas", "uzsakymu lukesciai")
datafr[2:nrow(datafr),"R kvadratas"]="-"
kable(datafr)
```
mod2=lm(formula = OMX ~ SP350 + lag(infliacija, 1) +
lag(phope, 1) + pramhope + lag(vp, 1) + lag(mp, 1) , data = data3)
summary(mod2)
mod = lm(OMX ~ SP350 + nedarbas + infliacija + mp + gkl + ip + kursas, data=data3)
summary(mod)
mod = lm(OMX ~ SP350 + nedarbas, data=data3)
summary(mod)
mod = lm(OMX ~ nedarbas, data=data3)
summary(mod)
mod = lm(OMX ~ SP350 + infliacija, data=data3)
summary(mod)
mod = lm(OMX ~ SP350 + infliacija + mp + gkl + ip + kursas, data=data3)
summary(mod)
summary(lm(formula = OMX ~ SP350 + nedarbas  + pramhope, data = data3))
mod = lm(OMX ~ SP350  + mp + gkl + ip + kursas, data=data3)
summary(mod)
a=read.csv("http://finance.yahoo.com/d/quotes.csv?s=BBDB.TO+NT.TO+GE+MSFT&f=snl1d1t1ohgdr")
View(a)
View(a)
